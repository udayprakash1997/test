trigger: none
pr:  none

pool:
  vmImage: 'ubuntu-latest'
variables:
- name: serviceconnection
  value: AzureDevOpsServiceConnection-Dev

# Provide information for terraform's backend
- name: TerraformBackend.ResourceGroup
  value: atlas-videoaudit-poc-rg
- name: TerraformBackend.StorageAccount
  value: citationterraform
- name: TerraformBackend.ContainerName
  value: terraformstate-dev
- name: TerraformBackend.key
  value: terraform-hsdev.tfstate
- name: WorkingDir
  value: 'Terraform/Atlas/HSDev'
  

# Go through this variable group to change the behaviour of terraform modules
- group: 'terraformControl - HSDev'


stages:
- stage: 'Init'
  displayName: "Terraform Plan & Validation"
  jobs:
  - job:
    displayName: Init
    steps:
    - template: '../../ATLAS/YAMLTemplate/terraformInit.yml'
      parameters:
        subscription: $(serviceconnection)
        workingDir: '$(System.DefaultWorkingDirectory)/Terraform/Atlas/HSDev'
        backendType: azurerm
        backendAzureRmResourceGroupName: '$(TerraformBackend.ResourceGroup)'
        backendAzureRmStorageAccountName: '$(TerraformBackend.StorageAccount)'
        backendAzureRmContainerName: '$(TerraformBackend.ContainerName)'
        backendAzureRmKey: '$(TerraformBackend.key)'
    - script: ls -ltr
- stage: 'Apply'
  displayName: "Deploy or modify resources with terraform"
  jobs:
  - job:
    displayName: Init
  - deployment: apply
    environment: apply
    strategy:
     runOnce:
        deploy:
           steps:
            - template: '../../ATLAS/YAMLTemplate/terraformApply.yml'
              parameters:
                subscription: $(serviceconnection)
                workingDir: '$(System.DefaultWorkingDirectory)/Atlas/HSDev'
                backendType: azurerm
                backendAzureRmResourceGroupName: '$(TerraformBackend.ResourceGroup)'
                backendAzureRmStorageAccountName: '$(TerraformBackend.StorageAccount)'
                backendAzureRmContainerName: '$(TerraformBackend.ContainerName)'
                backendAzureRmKey: '$(TerraformBackend.key)'
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                ======================================
                
                parameters: 
- name: workingDir                     # Working directory for terraform main module.
  type: string                          
  default: ''  
# Backend configuration
- name: backendType
  type: string    
- name: subscription                   # Same service connection will be used to access backend and to deploy resources.
  type: string
- name: backendAzureRmResourceGroupName
  type: string
- name: backendAzureRmStorageAccountName
  type: string
- name: backendAzureRmContainerName
  type: string
- name: backendAzureRmKey
  type: string             
  
steps:
- checkout: self
  fetchDepth: 1   
  clean: true
  continueOnError: false

- task: replacetokens@4
  inputs:
    rootDirectory: '$(System.DefaultWorkingDirectory)/Terraform/'
    targetFiles: |
      **/Atlas/HS/*.tfvars
      **/Atlas/DR/*.tfvars
      **/Atlas/HSDev/*.tfvars
      **/Atlas/SSOQA/*.tfvars
      **/QMS/UnityQA/*.tfvars
      **/QMS/UnitySSOQA/*.tfvars
      **/QMS/UnitySSOUAT2/*.tfvars
    encoding: 'auto'
    tokenPattern: 'rm'
    writeBOM: true
    actionOnMissing: 'warn'
    keepToken: false
    actionOnNoFiles: 'fail'
    enableTransforms: false
    enableRecursion: false
    useLegacyPattern: false
    enableTelemetry: false

- task: TerraformCLI@0
  inputs:
    command: 'init'
    workingDirectory: '${{parameters.workingDir}}'
    backendType: '${{parameters.backendType}}'
    backendServiceArm: '${{parameters.subscription}}'
    backendAzureRmResourceGroupName: '${{parameters.backendAzureRmResourceGroupName}}'
    backendAzureRmStorageAccountName: '${{parameters.backendAzureRmStorageAccountName}}'
    backendAzureRmContainerName: '${{parameters.backendAzureRmContainerName}}'
    backendAzureRmKey: '${{parameters.backendAzureRmKey}}'
    allowTelemetryCollection: false
    displayName: 'Terraform Init'

- task: TerraformCLI@0
  inputs:
    command: 'plan'
    workingDirectory: '${{parameters.workingDir}}'
    environmentServiceName: '${{parameters.subscription}}'
    commandOptions: '-var-file="terraform.tfvars" -input=false -out deployment.tfplan'
    allowTelemetryCollection: false
    displayName: 'Terraform Plan'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)/Terraform'
    includeRootFolder: false
    archiveType: 'tar'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).tgz'
    replaceExistingArchive: false
    displayName: 'Zip Artifacts'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifact: '$(Build.BuildId)-tfplan'
    publishLocation: 'pipeline'
    displayName: 'Publish Artifacts'
